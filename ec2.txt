EC2 : Elastic Compute Cloud

On-Demand EC2 Instances : unpredictable workloads / usecase.. Test your application .. 
	Pricing : /hr   (or) /sec billing (with min of 10 sec)


Reserved Instances : Stable workloads.. Contrac : 1 Yr / 3 Yrs... 

	Standard RI : We cannot upgrade the configuration.
	Convertable RI : We can change the configuration in future. 
	Scheduled RI : purchase capacity reservations that recur on a daily, weekly, or monthly basis,  start time and duration, for a one-year term.
Pricing : Full Upfront : Pay 100% now (onetime cost)
Partial upfront : Pay 30-50% now.. Remaining monthly basis based on running hours
No upfront : All amount monthly basis only


Spot Instances : If our application have flexible start/stop time. 

Spot Advisor / Pricing History

2 Hr 35 Min :  Price increased and AWS terminated instance : 2 hr
	       We have terminated our instance, price not increased : 2 Hr 35 Min

AWS Marketplace : Where we can sell / buy applications. 



Instance Lau8nch : 

AMI : Amazon Machine Image (AMI) : O/S

Step 2: Choose an Instance Type : vCPU, Memory and Network performnce

General purpose : stable performance : t2, t3 , m5a, m5d, m4 and m5 
Compute Optimised : CPU : c4, c5, c5n, c5d
GPU : p2, g4dn
Memory : RAM : r4, r5, r5a, r5d, z1d
Storage Optimised: d2, i2 and i3


Step 3 : Configure Additional settings

Terminate : Delete
Stop : We can start, whenever we want to. 

Monitoring : Cloudwatch : 
	Basic Monitoring : 5 Min (Free tier), Enabled by defaultly
	Enhanced/Detailed Monitoring : 1 Min (No Free tier)

Step 6: Configure Security Group
--> No Deny

Inbound : We need to open required ports.

ports : 0-65535

ssh:22		--> Linux
rdp:3389	--> Windows
http: 80
https :443
mssql:1433
mysql:3306


Source : 0.0.0.0/0 --> Everywhere
	IPAddress --> manual
	MyIP --> Currently connected network Public ip
Outbound : allo all traffic by defaultly.


Free Tier : 750 Hrs/Month, t2.micro Windows Instance (1 x 31 days = 744 Hrs)
	    750 Hrs/Month, t2.micro Linux Instance

Storage : 30 gb



Task : Launch a Windows Instance and install IIS and deliver the webpage.

Task 2 : CHange the Administrator's password and try to use the keypair generated password.

Task 3 : Create a new user and give valid permissions to login to instance.

Task 4 : give local admin rights to newly crated user.



https://avinash66.s3.ap-south-1.amazonaws.com/aws730.txt



Launch a Linux Instance : 

ssh -i keypair.pem ec2-user@Publicip


Status Checks : 
--> System Status Check : Host level / Physical resource level issues : Stop/Start, Additional NIC card / Contact AWS

--> Instance status check : o/s level checks : reboot


IP : 

13.126.230.62

NO FREE TIER
EIP : Elastic IP : 
ENI : Elastic Network Interface : 



Task : Launch a windows instance and install iis.

Task 2 : Create a new NIC card in same AZs and associate with IIS Webserver.

Launch another ec2 instance, and try to access the IIS hosted website using private IP address.

Root Device type : 

--> Instance Store Volumes : Ephemeral storage (temporary) : 
	--> It cannot sustain underlying host failure
	--> if host failure happens, we will loss all data.
	--> We cannot stop/start the instances
	--> We can reboot.

--> EBS (Elastic Block Storage) 

IOPS : input and Output per second
root volume : OS runs in root volume : gp2, io1 and magnetic
additional volumes : st1 & sc1

--> general purpose SSD (gp2) : Min 1 Gib, Max 16 TiB, Max IOPS : 16000, 

	(1:3) 1 gb = 3 iops with Min of 100 iops/3000 bustable. 

--> Provisioned IOPS (io1) : Min 4 gib, Max 16 Tib, Max IOPS : 64000*, (32000 IOPS for regular instances) (* Nitro Instances) 

	1 gb  = 50 iops but We have an option to edit as per our requirement.

--> Magnetic (standard): Min 1 gb, Max 1 tb, IOPS N/A, Less Freq accsed data/cheapest 

--> Throughput optimised HDD (st1) : Min 500 Gb, Max 16 TB, Throughput
--> Cold HDD (sc1) 

Create an EFS and Mount to an ec2 instance and install Httpd then prepare a GoldenAMI.

1. GoldenAMI	(Apache web server, EFS is mounted)
2. An ELB	(Plain/empty ELB)
3. Create an ASG
	3.1 Create a launch config (Tempate --> settings)
	3.2 Create an ASG (Alarm)

https://www.youtube.com/watch?v=sZiiB4yF0VY


Task 1 : AWS Cross Account access using roles.

Task 2 : Launch an ec2 instance using CLI.

Task 3 : Configure Scheduled task/cron job to replicate s3 data periodically for every 5 min.

Task 4 : Use WinSCP to transfer some files to our ec2 instance.

Task : 12/3/2019

Using "Run Command" install httpd and deliver a website

Using "Run Command" install any application in windows instance.

Using powershell script with SSM run command, change the timezone of windows instance

Create Resource group using particular Tag. 

explore ec2windowsrescue tool
